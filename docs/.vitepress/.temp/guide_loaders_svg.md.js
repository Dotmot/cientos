import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderComponent, ssrRenderStyle } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"SVG","description":"","frontmatter":{},"headers":[],"relativePath":"guide/loaders/svg.md","filePath":"guide/loaders/svg.md"}');
const _sfc_main = { name: "guide/loaders/svg.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_Badge = resolveComponent("Badge");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="svg" tabindex="-1">SVG `);
  _push(ssrRenderComponent(_component_Badge, {
    type: "warning",
    text: "^3.3.0"
  }, null, _parent));
  _push(` <a class="header-anchor" href="#svg" aria-label="Permalink to &quot;SVG &lt;Badge type=&quot;warning&quot; text=&quot;^3.3.0&quot; /&gt;&quot;">​</a></h1><p>A wrapper around the <code>three</code> <a href="https://threejs.org/examples/?q=sv#webgl_loader_svg" target="_blank" rel="noreferrer">SVGLoader</a>, this component allows you to easily load and display SVG elements in your <strong>TresJS</strong> scene.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> { SVG } </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">from</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;@tresjs/cientos&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">import</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> { SVG } </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">from</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;@tresjs/cientos&#39;</span></span></code></pre></div><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">template</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresCanvas</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">Suspense</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line highlighted"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">SVG</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">src</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;/favicon.svg&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">/</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">Suspense</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresCanvas</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">template</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">template</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresCanvas</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">Suspense</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line highlighted"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">SVG</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">src</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;/favicon.svg&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">/</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">Suspense</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresCanvas</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">template</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span></code></pre></div><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">Prop</th><th>Type</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Description</th><th>Default</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>src</strong></td><td><code>string</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">Either a path to an SVG <em>or</em> an SVG string</td><td></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>skipStrokes</strong></td><td><code>boolean</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">If <code>true</code>, the SVG strokes will not be rendered.</td><td><code>false</code></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>skipFills</strong></td><td><code>boolean</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">If <code>true</code>, the SVG fills will not be rendered.</td><td><code>false</code></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>strokeMaterial</strong></td><td><code>MeshBasicMaterialParameters</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">Props to assign to the stroke materials of the resulting meshes.</td><td><code>undefined</code></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>fillMaterial</strong></td><td><code>MeshBasicMaterialParameters</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">Props to assign to the fill materials of the resulting meshes.</td><td><code>undefined</code></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>strokeMeshProps</strong></td><td><code>TresOptions</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">Props to assign to the resulting stroke meshes.</td><td><code>undefined</code></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>fillMeshProps</strong></td><td><code>TresOptions</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">Props to assign to the resulting fill meshes.</td><td><code>undefined</code></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>depth</strong></td><td><code>&#39;renderOrder&#39; | &#39;flat&#39; | &#39;offsetZ&#39; | number</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}">Specify how SVG layers are to be rendered. (<a href="#depth">See &quot;Depth&quot;</a>)</td><td><code>renderOrder</code></td></tr></tbody></table><h2 id="depth" tabindex="-1">Depth <a class="header-anchor" href="#depth" aria-label="Permalink to &quot;Depth&quot;">​</a></h2><p>The <code>SVG</code> component&#39;s <code>depth</code> prop allows you to specify how the 2D layers will be rendered in 3D. It accepts the following values:</p><h3 id="renderorder" tabindex="-1"><code>&#39;renderOrder&#39;</code> <a class="header-anchor" href="#renderorder" aria-label="Permalink to &quot;\`&#39;renderOrder&#39;\`&quot;">​</a></h3><p><strong>Use case: Lone SVGs or applications that don&#39;t rely on stacked SVGs</strong></p><p>This is the default <code>depth</code> option.</p><p>This value sets the materials&#39; <code>depthWrite</code> to <code>false</code> and increments the <a href="https://threejs.org/docs/?q=mesh#api/en/core/Object3D.renderOrder" target="_blank" rel="noreferrer">mesh layers&#39; <code>renderOrder</code></a>. This makes the SVG layers render dependably regardless of perspective.</p><p>Disadvantage: Scene objects may render out of order.</p><p>SVG layers with higher <code>renderOrder</code> will be rendered after (i.e., sometimes &quot;on top of&quot;) other objects in the scene graph with a lower <code>renderOrder</code>. Depending on their settings, those other objects may render behind the SVG, even if they are closer to the camera.</p><h3 id="flat" tabindex="-1"><code>&#39;flat&#39;</code> <a class="header-anchor" href="#flat" aria-label="Permalink to &quot;\`&#39;flat&#39;\`&quot;">​</a></h3><p><strong>Use case: simple SVGs</strong></p><p>This option sets the <a href="https://threejs.org/docs/?q=mesh#api/en/materials/Material.depthWrite" target="_blank" rel="noreferrer">materials&#39; <code>depthWrite</code></a> to <code>false</code>.</p><p>Disadvantage: SVG layers may render out of order.</p><p>Overlapping layers in an SVG may be drawn out of order, depending on viewing perspective.</p><h3 id="zoffset" tabindex="-1"><code>&#39;zOffset&#39;</code> <a class="header-anchor" href="#zoffset" aria-label="Permalink to &quot;\`&#39;zOffset&#39;\`&quot;">​</a></h3><p><strong>Use case: unscaled SVGs seen from the front</strong></p><p>When this value is passed, the result is a 3D &quot;stack&quot; of mesh layers. A small space is added between each mesh layer in the &quot;stack&quot;.</p><p>Disadvantage: &quot;Bottom&quot; of the &quot;stack&quot; is visible; layers may z-fight.</p><p>When seen from behind, the &quot;bottom&quot; of the mesh layer &quot;stack&quot; is visible. The space between the layers may be noticeable depending on viewing perspective and scale. The layers may <a href="https://en.wikipedia.org/wiki/Z-fighting" target="_blank" rel="noreferrer">z-fight</a>, particularly if the SVG is scaled down.</p><h3 id="number" tabindex="-1"><code>number</code> <a class="header-anchor" href="#number" aria-label="Permalink to &quot;\`number\`&quot;">​</a></h3><p><strong>Use case: SVGs seen from the front</strong></p><p>This is the same as <code>&#39;zOffset&#39;</code> but allows you to specify how much space is added between each layer, in order to eliminate <a href="https://en.wikipedia.org/wiki/Z-fighting" target="_blank" rel="noreferrer">z-fighting</a>. For most use cases, this should be a value greater than 0.025 and less than 1.</p><p>Disadvantage: &quot;Bottom&quot; of the &quot;stack&quot; is visible.</p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is not a general-purpose SVG renderer. Many SVG features are unsupported.</p></div><p>Here are some things to try if you run into problems:</p><h3 id="error-xml-parsing-error-unclosed-token" tabindex="-1">Error: &quot;XML Parsing Error: unclosed token&quot; <a class="header-anchor" href="#error-xml-parsing-error-unclosed-token" aria-label="Permalink to &quot;Error: &quot;XML Parsing Error: unclosed token&quot;&quot;">​</a></h3><ul><li>In the SVG source, convert hex colors to rgb, e.g., convert <code>#ff0000</code> to <code>rgb(255, 0, 0)</code>.</li></ul><h3 id="parts-of-the-svg-render-in-the-wrong-order-or-disappear-depending-on-viewing-angle" tabindex="-1">Parts of the SVG render in the wrong order or disappear, depending on viewing angle <a class="header-anchor" href="#parts-of-the-svg-render-in-the-wrong-order-or-disappear-depending-on-viewing-angle" aria-label="Permalink to &quot;Parts of the SVG render in the wrong order or disappear, depending on viewing angle&quot;">​</a></h3><ul><li>In the component, <a href="#depth">change the <code>depth</code> prop</a>.</li><li>In the SVG source, use <code>fill=&quot;none&quot;</code> rather than <code>fill-opacity=&quot;0&quot;</code>.</li></ul><h3 id="parts-of-the-svg-z-fight" tabindex="-1">Parts of the SVG <a href="https://en.wikipedia.org/wiki/Z-fighting" target="_blank" rel="noreferrer">&quot;z-fight&quot;</a> <a class="header-anchor" href="#parts-of-the-svg-z-fight" aria-label="Permalink to &quot;Parts of the SVG [&quot;z-fight&quot;](https://en.wikipedia.org/wiki/Z-fighting)&quot;">​</a></h3><ul><li>In the component, <a href="#depth">change the <code>depth</code> prop</a>.</li><li>Increase the distance between the component and other on-screen elements.</li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guide/loaders/svg.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const svg = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  svg as default
};
