import { ssrRenderAttrs, ssrRenderAttr, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const _imports_0 = "/cientos/lensflare.png";
const _imports_1 = "/cientos/lensflare_seeds.png";
const __pageData = JSON.parse('{"title":"Lensflare","description":"","frontmatter":{},"headers":[],"relativePath":"guide/abstractions/lensflare.md","filePath":"guide/abstractions/lensflare.md"}');
const _sfc_main = { name: "guide/abstractions/lensflare.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="lensflare" tabindex="-1">Lensflare <a class="header-anchor" href="#lensflare" aria-label="Permalink to &quot;Lensflare&quot;">​</a></h1><p><img${ssrRenderAttr("src", _imports_0)} alt="Lensflare"></p><p><code>&lt;Lensflare /&gt;</code> wraps the <a href="https://threejs.org/docs/#examples/en/objects/Lensflare" target="_blank" rel="noreferrer">three.js Lensflare</a>.</p><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> { Lensflare } </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">from</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;@tresjs/cientos&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">import</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> { Lensflare } </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">from</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;@tresjs/cientos&#39;</span></span></code></pre></div><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">template</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresCanvas</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresPointLight</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line highlighted"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresPointLight</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresCanvas</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">template</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">template</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresCanvas</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresPointLight</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line highlighted"><span style="${ssrRenderStyle({ "color": "#24292E" })}">      &lt;</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;/</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresPointLight</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  &lt;/</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresCanvas</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">template</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span></code></pre></div><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h2><table><thead><tr><th>Prop</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><strong>scale</strong></td><td><code>number</code> - scale of the lensflare</td><td>1.0</td></tr><tr><td><a href="#elements"><strong>elements</strong></a></td><td><code>Partial&lt;LensflareElementProps&gt;[]</code> - array of lensflare element properties</td><td><code>undefined</code></td></tr><tr><td><a href="#seed"><strong>seed</strong></a></td><td><code>number</code> - random seed for generating random seeded elements</td><td><code>undefined</code></td></tr><tr><td><a href="#seedprops"><strong>seedProps</strong></a></td><td><code>SeedProps[]</code> - specifications for generating random seeded elements</td><td><code>undefined</code></td></tr><tr><td><strong>color</strong></td><td><code>TresColor</code> - default color of lensflare elements</td><td><code>undefined</code></td></tr><tr><td><strong>distance</strong></td><td><code>number</code> - default distance of lensflare elements from flare center</td><td><code>undefined</code></td></tr><tr><td><strong>size</strong></td><td><code>number</code> - default size of lensflare elements</td><td><code>undefined</code></td></tr><tr><td><strong>texture</strong></td><td><code>Texture | string</code> - default texture of lensflare elements</td><td><code>undefined</code></td></tr></tbody></table><h2 id="elements" tabindex="-1"><code>elements</code> <a class="header-anchor" href="#elements" aria-label="Permalink to &quot;\`elements\`&quot;">​</a></h2><p>You can specify individual lensflare element properties directly using the component&#39;s <code>elements</code> prop.</p><p>The <code>elements</code> prop expects an instance of <code>(Partial&lt;LensflareElementProps&gt;)[]</code>.</p><p>Every object in <code>elements</code> may have any (or none) of the following properties.</p><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">Name</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Description</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>texture</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>string | Texture</code> - an image URL or texture to use on the lensflare element</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>color</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>TresColor</code> - color of the lensflare element</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>distance</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>number</code> - distance of the lensflare element from the lensflare center</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>size</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>number</code> - size of the lensflare element</td></tr></tbody></table><h2 id="seed" tabindex="-1"><code>seed</code> <a class="header-anchor" href="#seed" aria-label="Permalink to &quot;\`seed\`&quot;">​</a></h2><p>Adding a <code>seed</code> prop to a component enables seeded random element generation.</p><p>The <code>seed</code> prop is used as the &quot;seed&quot; in a <a href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator" target="_blank" rel="noreferrer">pseudorandom number generator (PRNG)</a>. The PRNG is in turn used to build lensflare elements, by selecting values from an array of <code>SeedProps</code>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you set a <code>seed</code> but not <code>seedProps</code>, the component will fall back to the default, built-in <code>SeedProps[]</code>.</p></div><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#e1e4e8" })}">&lt;Lensflare :seed=&quot;seedRef&quot; /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292e" })}">&lt;Lensflare :seed=&quot;seedRef&quot; /&gt;</span></span></code></pre></div><p>Below, the results of setting <code>seedRef.value</code> to <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, respectively.</p><p><img${ssrRenderAttr("src", _imports_1)} alt="Lensflare seeds 0-4"></p><h2 id="seedprops" tabindex="-1"><code>seedProps</code> <a class="header-anchor" href="#seedprops" aria-label="Permalink to &quot;\`seedProps\`&quot;">​</a></h2><p>Adding a <code>seedProps</code> prop to the component enables seeded random element generation.</p><p>The <code>seedProps</code> prop expects an instance of <code>SeedProps[]</code>. It specifies rules and acceptable values for creating random lensflare elements.</p><p>Every element in <code>seedProps</code> has this shape.</p><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">Name</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Description</th><th>Required</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>texture</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>string[]</code> - array of 1 or more image URLs; a single texture will be selected per generated element</td><td>yes</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>color</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>TresColor[]</code> - array of 1 or more colors; a single color will be selected per generated element</td><td>yes</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>distance</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>[number, number]</code> - minimum and maximum allowable distance from the flare center</td><td>yes</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>size</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>[number, number]</code> - minimum and maximum allowable size</td><td>yes</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>length</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>[number, number]</code> - minimum and maximum allowable number of elements to generate</td><td>yes</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>seed</strong></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>number</code> - if set, when this entry is processed, the random number generator with a combination of the incoming seed and this seed</td><td>no</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If you set <code>seedProps</code> but not <code>seed</code>, the component will fall back to a default <code>seed</code> of <code>0</code>.</p></div><h2 id="random-elements-and-non-random-properties" tabindex="-1">Random elements and non-random properties <a class="header-anchor" href="#random-elements-and-non-random-properties" aria-label="Permalink to &quot;Random elements and non-random properties&quot;">​</a></h2><p><code>&lt;Lensflare /&gt;</code> was designed to make it easy to get a lensflare on screen. You can simply add the component with no props and the component will generate seeded random lensflare elements.</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span></code></pre></div><h3 id="non-random-properties" tabindex="-1">Non-random properties <a class="header-anchor" href="#non-random-properties" aria-label="Permalink to &quot;Non-random properties&quot;">​</a></h3><p>You can provide a list of lensflare element properties using the <a href="#elements"><code>elements</code></a> prop.</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> :</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">elements</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">[{color:</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;red&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}, {color:</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;yellow&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}]</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> :</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">elements</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">[{color:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;red&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}, {color:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;yellow&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}]</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span></code></pre></div><p>This will produce a lensflare with 2 elements. The first element will be red. The second will be yellow. The unspecified properties – <code>distance</code>, <code>size</code>, <code>texture</code> – will be filled in by the built-in defaults in this case.</p><p>You can also provide default props which will overwrite random generated props.</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">color:</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">&quot;red&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">color:</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">&quot;red&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span></code></pre></div><p>Since <code>elements</code> is not defined here, the component will generate random lensflare elements. The specified <code>color</code> prop – &quot;red&quot; – will overwrite the color property of the generated lensflare elements.</p><p>See <a href="#precedence">precedence</a> for details about how properties are filled in.</p><h3 id="random-elements" tabindex="-1">Random elements <a class="header-anchor" href="#random-elements" aria-label="Permalink to &quot;Random elements&quot;">​</a></h3><p>You can let the component generate random elements ...</p><p>... by not adding an <a href="#elements"><code>elements</code> prop</a></p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span></code></pre></div><p>... by adding a <a href="#seed"><code>seed</code> prop</a></p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> :</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">seed</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">7127</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> :</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">seed</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">7127</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span></code></pre></div><p>... by adding a <a href="#seedprops"><code>seedProps</code> prop</a></p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> :</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">seedProps</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">[{</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">...</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}, {</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">...</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}]</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> :</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">seedProps</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">[{</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">...</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}, {</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">...</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}]</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span></code></pre></div><h3 id="mixing-random-elements-and-non-random-properties" tabindex="-1">Mixing random elements and non-random properties <a class="header-anchor" href="#mixing-random-elements-and-non-random-properties" aria-label="Permalink to &quot;Mixing random elements and non-random properties&quot;">​</a></h3><p>You can mix your own properties and random elements.</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> :</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">elements</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">[{</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">...</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}, {</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">...</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}]</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> :</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">seed</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">8193</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> :</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">elements</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">[{</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">...</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}, {</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">...</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}]</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> :</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">seed</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">8193</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span></code></pre></div><p>Here, both <code>elements</code> and <code>seed</code> are defined. The component will generate random elements and overwrite their properties with the contents of <code>elements</code>, according to the <a href="#precedence">order of precedence</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>When mixing random elements with <code>elements</code>, the final number of lensflare elements equals whichever is <strong>larger</strong>, the length of the array of generated random elements or the length of <code>elements</code>.</p></div><h3 id="precedence" tabindex="-1">Precedence <a class="header-anchor" href="#precedence" aria-label="Permalink to &quot;Precedence&quot;">​</a></h3><p>If more than one source sets the same property on a given element, the following order of precendence is used. Higher in the list (lower number) equals higher precendence.</p><ol><li><code>elements</code></li><li><code>color</code>, <code>distance</code>, <code>size</code>, <code>texture</code> – default element properties</li><li><code>seed</code>, <code>seedProps</code> – generated random elements</li><li>built-in default element properties</li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p>If <code>elements</code>, <code>seed</code>, and <code>seedProps</code> are all undefined, a <code>seed</code> of <code>0</code> and built-in default <code>seedProps</code> will be used to generate the lensflare elements.</p></div><details class="details custom-block"><summary>Precedence example</summary><p>Here&#39;s an example of precedence. Assume this is in our vue template.</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#85E89D" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  :</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">elements</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">[</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    {size:</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">512</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, texture</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;http://example.net/circle.png&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    {color:</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;yellow&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, distance:</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">0.5</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  ]</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  :</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">texture</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">http</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">:</span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//example.net/ring.png&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  color</span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">red</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  :</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">size</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">256</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  :</span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">seed</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#22863A" })}">Lensflare</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  :</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">elements</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">[</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    {size:</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">512</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, texture</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;http://example.net/circle.png&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}, </span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    {color:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;yellow&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, distance:</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">0.5</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">}</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  ]</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  :</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">texture</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">http</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">:</span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">//example.net/ring.png&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  color</span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">red</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  :</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">size</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">256</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  :</span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">seed</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span></code></pre></div><p><code>seed</code> is defined, so the component will produce random elements.</p><p>Assume the random element generator produces this, based on <code>seed</code>:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">[</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  {color:</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;white&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, distance:</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, size:</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1024</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, texture:</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;http://example.net/rays.png&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">},</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  {color:</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;white&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, distance:</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">1</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, size:</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">512</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, texture:</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;http://example.net/circle.png&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">},</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  {color:</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;white&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, distance:</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, size:</span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">512</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, texture:</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;http://example.net/circle.png&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">},</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">[</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  {color:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;white&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, distance:</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">0</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, size:</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1024</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, texture:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;http://example.net/rays.png&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">},</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  {color:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;white&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, distance:</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">1</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, size:</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">512</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, texture:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;http://example.net/circle.png&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">},</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  {color:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;white&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, distance:</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">2</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, size:</span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">512</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, texture:</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;http://example.net/circle.png&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">},</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">]</span></span></code></pre></div><p>When random elements are mixed with <code>elements</code>, the final number of elements in the lensflare is determined by whichever is longer.</p><p>Here, <code>elements</code> contains 2 entries. The random element generator produced 3. So the resulting lensflare will have 3 elements.</p><p>Therefore, resulting lensflare will have 3 elements.</p><p>The resulting 3 lensflare elements will have the following properties, from the following sources:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">[</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    color: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;yellow&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from \`elements\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    distance: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">0</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from random element generator</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    size: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">512</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from \`elements\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    texture: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;http://example.net/circle.png&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from \`elements\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    color: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;red&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`color\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    distance: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">0.5</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from \`elements\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    size: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">256</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`size\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    texture: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;http://example.net/ring.png&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`texture\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    color: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;red&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`color\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    distance: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">2</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from random element generator</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    size: </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">256</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`size\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    texture: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;http://example.net/ring.png&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`texture\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">[</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    color: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;yellow&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from \`elements\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    distance: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">0</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from random element generator</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    size: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">512</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from \`elements\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    texture: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;http://example.net/circle.png&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from \`elements\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    color: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;red&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`color\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    distance: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">0.5</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from \`elements\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    size: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">256</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`size\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    texture: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;http://example.net/ring.png&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`texture\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  },</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  {</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    color: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;red&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`color\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    distance: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">2</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from random element generator</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    size: </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">256</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">, </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`size\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    texture: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;http://example.net/ring.png&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6A737D" })}">// from component prop \`texture\`</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  }</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">]</span></span></code></pre></div></details></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guide/abstractions/lensflare.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const lensflare = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  lensflare as default
};
