import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderComponent, ssrRenderStyle } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.cc2b3d55.js";
const __pageData = JSON.parse('{"title":"UseEnvironment","description":"","frontmatter":{},"headers":[],"relativePath":"guide/staging/use-environment.md","filePath":"guide/staging/use-environment.md"}');
const _sfc_main = { name: "guide/staging/use-environment.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_Badge = resolveComponent("Badge");
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="useenvironment" tabindex="-1">UseEnvironment `);
  _push(ssrRenderComponent(_component_Badge, {
    type: "warning",
    text: "^1.7.0"
  }, null, _parent));
  _push(` <a class="header-anchor" href="#useenvironment" aria-label="Permalink to &quot;UseEnvironment &lt;Badge type=&quot;warning&quot; text=&quot;^1.7.0&quot; /&gt;&quot;">​</a></h1><p><code>useEnvironment</code> composable that automatically sets up a global cubemap, which affects the default <code>scene.environment</code>, and optionally <code>scene.background</code>.</p><p>It uses the <a href="https://threejs.org/docs/#api/en/loaders/CubeTextureLoader" target="_blank" rel="noreferrer">CubeTextureLoader</a> to load the cubemap</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> { useEnvironment } </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">from</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;@tresjs/cientos&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#79B8FF" })}">texture</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">=</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#F97583" })}">await</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">useEnvironment</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  files: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/textures/environmentMaps/0/px.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/textures/environmentMaps/0/nx.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/textures/environmentMaps/0/py.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/textures/environmentMaps/0/ny.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/textures/environmentMaps/0/pz.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;/textures/environmentMaps/0/nz.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  path: </span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&#39;&#39;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">  encoding: SRGBColorSpace,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">import</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> { useEnvironment } </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">from</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;@tresjs/cientos&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#D73A49" })}">const</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#005CC5" })}">texture</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">=</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#D73A49" })}">await</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">useEnvironment</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">({</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  files: [</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/textures/environmentMaps/0/px.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/textures/environmentMaps/0/nx.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/textures/environmentMaps/0/py.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/textures/environmentMaps/0/ny.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/textures/environmentMaps/0/pz.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;/textures/environmentMaps/0/nz.jpg&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  ],</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  path: </span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&#39;&#39;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">  encoding: SRGBColorSpace,</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">})</span></span></code></pre></div><p>Then you can use the <code>texture</code> in your scene:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresMesh</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresSphereGeometry</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span>
<span class="line highlighted"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresMeshStandardMaterial</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> </span><span style="${ssrRenderStyle({ "color": "#B392F0" })}">:map</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">=</span><span style="${ssrRenderStyle({ "color": "#9ECBFF" })}">&quot;texture&quot;</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#FDAEB7", "font-style": "italic" })}">TresMesh</span><span style="${ssrRenderStyle({ "color": "#E1E4E8" })}">&gt;</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresMesh</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresSphereGeometry</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span>
<span class="line highlighted"><span style="${ssrRenderStyle({ "color": "#24292E" })}">    &lt;</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresMeshStandardMaterial</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> </span><span style="${ssrRenderStyle({ "color": "#6F42C1" })}">:map</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">=</span><span style="${ssrRenderStyle({ "color": "#032F62" })}">&quot;texture&quot;</span><span style="${ssrRenderStyle({ "color": "#24292E" })}"> /&gt;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "color": "#24292E" })}">&lt;/</span><span style="${ssrRenderStyle({ "color": "#B31D28", "font-style": "italic" })}">TresMesh</span><span style="${ssrRenderStyle({ "color": "#24292E" })}">&gt;</span></span></code></pre></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><table><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">Name</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>files</strong></td><td><code>Array</code></td><td><code>undefined</code></td><td>Array of 6 urls to images, one for each side of the CubeTexture.</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>path</strong></td><td><code>boolean</code></td><td><code>false</code></td><td>Path to the environment map files.</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>encoding</strong></td><td><code>Encoding</code></td><td><code>SRGBColorSpace</code> for an array of files and <code>LinearEncoding</code> for a single texture</td><td>Encoding of the environment map.</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>background</strong></td><td><code>boolean</code></td><td><code>false</code></td><td>If <code>true</code> the texture will be used as the scene background.</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>blur</strong></td><td><code>number</code></td><td><code>0</code></td><td>Blur factor between 0 and 1. (only works with three 0.146 and up)</td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><strong>preset</strong></td><td><code>string</code></td><td><code>undefined</code></td><td>Preset environment map.</td></tr></tbody></table></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guide/staging/use-environment.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const useEnvironment = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  useEnvironment as default
};
